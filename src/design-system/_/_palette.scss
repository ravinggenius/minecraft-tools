:root {
	$lightness-base: 70%;
	$lightness-steps: (
		"050": 4.5,
		"100": 4,
		"200": 3,
		"300": 2,
		"400": 1,
		"500": 0,
		"600": -1,
		"700": -2,
		"800": -3,
		"900": -4,
		"950": -4.5
	);
	$lightness-step-size: 6.5;

	$chroma-base: 6.703;

	$hue-neutral-value: 240;
	$hue-names: (
		// background, foreground, border, shadow
		"neutral": $hue-neutral-value,
		// errors, warnings
		"red": 30,
		// success
		"green": 150,
		// information, feedback
		"blue": 290,
		// tips
		"yellow": 100
	);

	@function ternary($condition, $if-true, $if-false) {
		@if $condition {
			@return $if-true;
		}

		@return $if-false;
	}

	@function chroma-modifier($hue-name) {
		@return ternary($hue-name == "neutral", 0, 100);
	}

	/* SEE https://caniuse.com/mdn-css_types_color_color-contrast */

	--color-special-coal: lch(0% 0 0);
	--color-special-snow: lch(100% 0 0);

	--color-special-glass: lch(from var(--color-special-snow) l c h / 0%);

	--color-base: lch(#{$lightness-base} #{$chroma-base} #{$hue-neutral-value});

	@each $name, $hue in $hue-names {
		@each $lightness-level, $step in $lightness-steps {
			--color-#{$name}-#{$lightness-level}: lch(
				from var(--color-base)
					#{ternary(
						($lightness-step-size * $step) == 0,
						l,
						calc(l + #{$lightness-step-size * $step})
					)}
					#{ternary(
						chroma-modifier($name) == 0,
						c,
						calc(c + chroma-modifier($name))
					)}
					#{ternary($hue == $hue-neutral-value, h, $hue)}
			);
		}
	}
}
